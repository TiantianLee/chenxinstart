/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.com.chenxin.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-29")
public class DatasourceMarketFoodThrift {

  public interface Iface {

    public String findFoodScAndQs(LogInfo LogInfo, String params) throws org.apache.thrift.TException;

    public String findFoodAddLic(LogInfo LogInfo, String params) throws org.apache.thrift.TException;

    public String findLikeCompany(LogInfo LogInfo, String params) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findFoodScAndQs(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findFoodAddLic(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findLikeCompany(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String findFoodScAndQs(LogInfo LogInfo, String params) throws org.apache.thrift.TException
    {
      send_findFoodScAndQs(LogInfo, params);
      return recv_findFoodScAndQs();
    }

    public void send_findFoodScAndQs(LogInfo LogInfo, String params) throws org.apache.thrift.TException
    {
      findFoodScAndQs_args args = new findFoodScAndQs_args();
      args.setLogInfo(LogInfo);
      args.setParams(params);
      sendBase("findFoodScAndQs", args);
    }

    public String recv_findFoodScAndQs() throws org.apache.thrift.TException
    {
      findFoodScAndQs_result result = new findFoodScAndQs_result();
      receiveBase(result, "findFoodScAndQs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFoodScAndQs failed: unknown result");
    }

    public String findFoodAddLic(LogInfo LogInfo, String params) throws org.apache.thrift.TException
    {
      send_findFoodAddLic(LogInfo, params);
      return recv_findFoodAddLic();
    }

    public void send_findFoodAddLic(LogInfo LogInfo, String params) throws org.apache.thrift.TException
    {
      findFoodAddLic_args args = new findFoodAddLic_args();
      args.setLogInfo(LogInfo);
      args.setParams(params);
      sendBase("findFoodAddLic", args);
    }

    public String recv_findFoodAddLic() throws org.apache.thrift.TException
    {
      findFoodAddLic_result result = new findFoodAddLic_result();
      receiveBase(result, "findFoodAddLic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFoodAddLic failed: unknown result");
    }

    public String findLikeCompany(LogInfo LogInfo, String params) throws org.apache.thrift.TException
    {
      send_findLikeCompany(LogInfo, params);
      return recv_findLikeCompany();
    }

    public void send_findLikeCompany(LogInfo LogInfo, String params) throws org.apache.thrift.TException
    {
      findLikeCompany_args args = new findLikeCompany_args();
      args.setLogInfo(LogInfo);
      args.setParams(params);
      sendBase("findLikeCompany", args);
    }

    public String recv_findLikeCompany() throws org.apache.thrift.TException
    {
      findLikeCompany_result result = new findLikeCompany_result();
      receiveBase(result, "findLikeCompany");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLikeCompany failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findFoodScAndQs(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFoodScAndQs_call method_call = new findFoodScAndQs_call(LogInfo, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFoodScAndQs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LogInfo LogInfo;
      private String params;
      public findFoodScAndQs_call(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.LogInfo = LogInfo;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFoodScAndQs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFoodScAndQs_args args = new findFoodScAndQs_args();
        args.setLogInfo(LogInfo);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFoodScAndQs();
      }
    }

    public void findFoodAddLic(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFoodAddLic_call method_call = new findFoodAddLic_call(LogInfo, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFoodAddLic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LogInfo LogInfo;
      private String params;
      public findFoodAddLic_call(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.LogInfo = LogInfo;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFoodAddLic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFoodAddLic_args args = new findFoodAddLic_args();
        args.setLogInfo(LogInfo);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFoodAddLic();
      }
    }

    public void findLikeCompany(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLikeCompany_call method_call = new findLikeCompany_call(LogInfo, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLikeCompany_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LogInfo LogInfo;
      private String params;
      public findLikeCompany_call(LogInfo LogInfo, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.LogInfo = LogInfo;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLikeCompany", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLikeCompany_args args = new findLikeCompany_args();
        args.setLogInfo(LogInfo);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLikeCompany();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findFoodScAndQs", new findFoodScAndQs());
      processMap.put("findFoodAddLic", new findFoodAddLic());
      processMap.put("findLikeCompany", new findLikeCompany());
      return processMap;
    }

    public static class findFoodScAndQs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFoodScAndQs_args> {
      public findFoodScAndQs() {
        super("findFoodScAndQs");
      }

      public findFoodScAndQs_args getEmptyArgsInstance() {
        return new findFoodScAndQs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFoodScAndQs_result getResult(I iface, findFoodScAndQs_args args) throws org.apache.thrift.TException {
        findFoodScAndQs_result result = new findFoodScAndQs_result();
        result.success = iface.findFoodScAndQs(args.LogInfo, args.params);
        return result;
      }
    }

    public static class findFoodAddLic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFoodAddLic_args> {
      public findFoodAddLic() {
        super("findFoodAddLic");
      }

      public findFoodAddLic_args getEmptyArgsInstance() {
        return new findFoodAddLic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFoodAddLic_result getResult(I iface, findFoodAddLic_args args) throws org.apache.thrift.TException {
        findFoodAddLic_result result = new findFoodAddLic_result();
        result.success = iface.findFoodAddLic(args.LogInfo, args.params);
        return result;
      }
    }

    public static class findLikeCompany<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLikeCompany_args> {
      public findLikeCompany() {
        super("findLikeCompany");
      }

      public findLikeCompany_args getEmptyArgsInstance() {
        return new findLikeCompany_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findLikeCompany_result getResult(I iface, findLikeCompany_args args) throws org.apache.thrift.TException {
        findLikeCompany_result result = new findLikeCompany_result();
        result.success = iface.findLikeCompany(args.LogInfo, args.params);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findFoodScAndQs", new findFoodScAndQs());
      processMap.put("findFoodAddLic", new findFoodAddLic());
      processMap.put("findLikeCompany", new findLikeCompany());
      return processMap;
    }

    public static class findFoodScAndQs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findFoodScAndQs_args, String> {
      public findFoodScAndQs() {
        super("findFoodScAndQs");
      }

      public findFoodScAndQs_args getEmptyArgsInstance() {
        return new findFoodScAndQs_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findFoodScAndQs_result result = new findFoodScAndQs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findFoodScAndQs_result result = new findFoodScAndQs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findFoodScAndQs_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findFoodScAndQs(args.LogInfo, args.params,resultHandler);
      }
    }

    public static class findFoodAddLic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findFoodAddLic_args, String> {
      public findFoodAddLic() {
        super("findFoodAddLic");
      }

      public findFoodAddLic_args getEmptyArgsInstance() {
        return new findFoodAddLic_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findFoodAddLic_result result = new findFoodAddLic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findFoodAddLic_result result = new findFoodAddLic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findFoodAddLic_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findFoodAddLic(args.LogInfo, args.params,resultHandler);
      }
    }

    public static class findLikeCompany<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLikeCompany_args, String> {
      public findLikeCompany() {
        super("findLikeCompany");
      }

      public findLikeCompany_args getEmptyArgsInstance() {
        return new findLikeCompany_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            findLikeCompany_result result = new findLikeCompany_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findLikeCompany_result result = new findLikeCompany_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findLikeCompany_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.findLikeCompany(args.LogInfo, args.params,resultHandler);
      }
    }

  }

  public static class findFoodScAndQs_args implements org.apache.thrift.TBase<findFoodScAndQs_args, findFoodScAndQs_args._Fields>, java.io.Serializable, Cloneable, Comparable<findFoodScAndQs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFoodScAndQs_args");

    private static final org.apache.thrift.protocol.TField LOG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("LogInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFoodScAndQs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFoodScAndQs_argsTupleSchemeFactory());
    }

    public LogInfo LogInfo; // required
    public String params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INFO((short)1, "LogInfo"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INFO
            return LOG_INFO;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INFO, new org.apache.thrift.meta_data.FieldMetaData("LogInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogInfo.class)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFoodScAndQs_args.class, metaDataMap);
    }

    public findFoodScAndQs_args() {
    }

    public findFoodScAndQs_args(
      LogInfo LogInfo,
      String params)
    {
      this();
      this.LogInfo = LogInfo;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFoodScAndQs_args(findFoodScAndQs_args other) {
      if (other.isSetLogInfo()) {
        this.LogInfo = new LogInfo(other.LogInfo);
      }
      if (other.isSetParams()) {
        this.params = other.params;
      }
    }

    public findFoodScAndQs_args deepCopy() {
      return new findFoodScAndQs_args(this);
    }

    @Override
    public void clear() {
      this.LogInfo = null;
      this.params = null;
    }

    public LogInfo getLogInfo() {
      return this.LogInfo;
    }

    public findFoodScAndQs_args setLogInfo(LogInfo LogInfo) {
      this.LogInfo = LogInfo;
      return this;
    }

    public void unsetLogInfo() {
      this.LogInfo = null;
    }

    /** Returns true if field LogInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLogInfo() {
      return this.LogInfo != null;
    }

    public void setLogInfoIsSet(boolean value) {
      if (!value) {
        this.LogInfo = null;
      }
    }

    public String getParams() {
      return this.params;
    }

    public findFoodScAndQs_args setParams(String params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INFO:
        if (value == null) {
          unsetLogInfo();
        } else {
          setLogInfo((LogInfo)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INFO:
        return getLogInfo();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INFO:
        return isSetLogInfo();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFoodScAndQs_args)
        return this.equals((findFoodScAndQs_args)that);
      return false;
    }

    public boolean equals(findFoodScAndQs_args that) {
      if (that == null)
        return false;

      boolean this_present_LogInfo = true && this.isSetLogInfo();
      boolean that_present_LogInfo = true && that.isSetLogInfo();
      if (this_present_LogInfo || that_present_LogInfo) {
        if (!(this_present_LogInfo && that_present_LogInfo))
          return false;
        if (!this.LogInfo.equals(that.LogInfo))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_LogInfo = true && (isSetLogInfo());
      list.add(present_LogInfo);
      if (present_LogInfo)
        list.add(LogInfo);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFoodScAndQs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogInfo()).compareTo(other.isSetLogInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogInfo, other.LogInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFoodScAndQs_args(");
      boolean first = true;

      sb.append("LogInfo:");
      if (this.LogInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.LogInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (LogInfo != null) {
        LogInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFoodScAndQs_argsStandardSchemeFactory implements SchemeFactory {
      public findFoodScAndQs_argsStandardScheme getScheme() {
        return new findFoodScAndQs_argsStandardScheme();
      }
    }

    private static class findFoodScAndQs_argsStandardScheme extends StandardScheme<findFoodScAndQs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFoodScAndQs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.LogInfo = new LogInfo();
                struct.LogInfo.read(iprot);
                struct.setLogInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.params = iprot.readString();
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFoodScAndQs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.LogInfo != null) {
          oprot.writeFieldBegin(LOG_INFO_FIELD_DESC);
          struct.LogInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeString(struct.params);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFoodScAndQs_argsTupleSchemeFactory implements SchemeFactory {
      public findFoodScAndQs_argsTupleScheme getScheme() {
        return new findFoodScAndQs_argsTupleScheme();
      }
    }

    private static class findFoodScAndQs_argsTupleScheme extends TupleScheme<findFoodScAndQs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFoodScAndQs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogInfo()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLogInfo()) {
          struct.LogInfo.write(oprot);
        }
        if (struct.isSetParams()) {
          oprot.writeString(struct.params);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFoodScAndQs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.LogInfo = new LogInfo();
          struct.LogInfo.read(iprot);
          struct.setLogInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.params = iprot.readString();
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findFoodScAndQs_result implements org.apache.thrift.TBase<findFoodScAndQs_result, findFoodScAndQs_result._Fields>, java.io.Serializable, Cloneable, Comparable<findFoodScAndQs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFoodScAndQs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFoodScAndQs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFoodScAndQs_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFoodScAndQs_result.class, metaDataMap);
    }

    public findFoodScAndQs_result() {
    }

    public findFoodScAndQs_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFoodScAndQs_result(findFoodScAndQs_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findFoodScAndQs_result deepCopy() {
      return new findFoodScAndQs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findFoodScAndQs_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFoodScAndQs_result)
        return this.equals((findFoodScAndQs_result)that);
      return false;
    }

    public boolean equals(findFoodScAndQs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFoodScAndQs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFoodScAndQs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFoodScAndQs_resultStandardSchemeFactory implements SchemeFactory {
      public findFoodScAndQs_resultStandardScheme getScheme() {
        return new findFoodScAndQs_resultStandardScheme();
      }
    }

    private static class findFoodScAndQs_resultStandardScheme extends StandardScheme<findFoodScAndQs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFoodScAndQs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFoodScAndQs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFoodScAndQs_resultTupleSchemeFactory implements SchemeFactory {
      public findFoodScAndQs_resultTupleScheme getScheme() {
        return new findFoodScAndQs_resultTupleScheme();
      }
    }

    private static class findFoodScAndQs_resultTupleScheme extends TupleScheme<findFoodScAndQs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFoodScAndQs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFoodScAndQs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findFoodAddLic_args implements org.apache.thrift.TBase<findFoodAddLic_args, findFoodAddLic_args._Fields>, java.io.Serializable, Cloneable, Comparable<findFoodAddLic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFoodAddLic_args");

    private static final org.apache.thrift.protocol.TField LOG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("LogInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFoodAddLic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFoodAddLic_argsTupleSchemeFactory());
    }

    public LogInfo LogInfo; // required
    public String params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INFO((short)1, "LogInfo"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INFO
            return LOG_INFO;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INFO, new org.apache.thrift.meta_data.FieldMetaData("LogInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogInfo.class)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFoodAddLic_args.class, metaDataMap);
    }

    public findFoodAddLic_args() {
    }

    public findFoodAddLic_args(
      LogInfo LogInfo,
      String params)
    {
      this();
      this.LogInfo = LogInfo;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFoodAddLic_args(findFoodAddLic_args other) {
      if (other.isSetLogInfo()) {
        this.LogInfo = new LogInfo(other.LogInfo);
      }
      if (other.isSetParams()) {
        this.params = other.params;
      }
    }

    public findFoodAddLic_args deepCopy() {
      return new findFoodAddLic_args(this);
    }

    @Override
    public void clear() {
      this.LogInfo = null;
      this.params = null;
    }

    public LogInfo getLogInfo() {
      return this.LogInfo;
    }

    public findFoodAddLic_args setLogInfo(LogInfo LogInfo) {
      this.LogInfo = LogInfo;
      return this;
    }

    public void unsetLogInfo() {
      this.LogInfo = null;
    }

    /** Returns true if field LogInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLogInfo() {
      return this.LogInfo != null;
    }

    public void setLogInfoIsSet(boolean value) {
      if (!value) {
        this.LogInfo = null;
      }
    }

    public String getParams() {
      return this.params;
    }

    public findFoodAddLic_args setParams(String params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INFO:
        if (value == null) {
          unsetLogInfo();
        } else {
          setLogInfo((LogInfo)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INFO:
        return getLogInfo();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INFO:
        return isSetLogInfo();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFoodAddLic_args)
        return this.equals((findFoodAddLic_args)that);
      return false;
    }

    public boolean equals(findFoodAddLic_args that) {
      if (that == null)
        return false;

      boolean this_present_LogInfo = true && this.isSetLogInfo();
      boolean that_present_LogInfo = true && that.isSetLogInfo();
      if (this_present_LogInfo || that_present_LogInfo) {
        if (!(this_present_LogInfo && that_present_LogInfo))
          return false;
        if (!this.LogInfo.equals(that.LogInfo))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_LogInfo = true && (isSetLogInfo());
      list.add(present_LogInfo);
      if (present_LogInfo)
        list.add(LogInfo);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFoodAddLic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogInfo()).compareTo(other.isSetLogInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogInfo, other.LogInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFoodAddLic_args(");
      boolean first = true;

      sb.append("LogInfo:");
      if (this.LogInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.LogInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (LogInfo != null) {
        LogInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFoodAddLic_argsStandardSchemeFactory implements SchemeFactory {
      public findFoodAddLic_argsStandardScheme getScheme() {
        return new findFoodAddLic_argsStandardScheme();
      }
    }

    private static class findFoodAddLic_argsStandardScheme extends StandardScheme<findFoodAddLic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFoodAddLic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.LogInfo = new LogInfo();
                struct.LogInfo.read(iprot);
                struct.setLogInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.params = iprot.readString();
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFoodAddLic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.LogInfo != null) {
          oprot.writeFieldBegin(LOG_INFO_FIELD_DESC);
          struct.LogInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeString(struct.params);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFoodAddLic_argsTupleSchemeFactory implements SchemeFactory {
      public findFoodAddLic_argsTupleScheme getScheme() {
        return new findFoodAddLic_argsTupleScheme();
      }
    }

    private static class findFoodAddLic_argsTupleScheme extends TupleScheme<findFoodAddLic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFoodAddLic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogInfo()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLogInfo()) {
          struct.LogInfo.write(oprot);
        }
        if (struct.isSetParams()) {
          oprot.writeString(struct.params);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFoodAddLic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.LogInfo = new LogInfo();
          struct.LogInfo.read(iprot);
          struct.setLogInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.params = iprot.readString();
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findFoodAddLic_result implements org.apache.thrift.TBase<findFoodAddLic_result, findFoodAddLic_result._Fields>, java.io.Serializable, Cloneable, Comparable<findFoodAddLic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFoodAddLic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFoodAddLic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFoodAddLic_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFoodAddLic_result.class, metaDataMap);
    }

    public findFoodAddLic_result() {
    }

    public findFoodAddLic_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFoodAddLic_result(findFoodAddLic_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findFoodAddLic_result deepCopy() {
      return new findFoodAddLic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findFoodAddLic_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFoodAddLic_result)
        return this.equals((findFoodAddLic_result)that);
      return false;
    }

    public boolean equals(findFoodAddLic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFoodAddLic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFoodAddLic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFoodAddLic_resultStandardSchemeFactory implements SchemeFactory {
      public findFoodAddLic_resultStandardScheme getScheme() {
        return new findFoodAddLic_resultStandardScheme();
      }
    }

    private static class findFoodAddLic_resultStandardScheme extends StandardScheme<findFoodAddLic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFoodAddLic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFoodAddLic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFoodAddLic_resultTupleSchemeFactory implements SchemeFactory {
      public findFoodAddLic_resultTupleScheme getScheme() {
        return new findFoodAddLic_resultTupleScheme();
      }
    }

    private static class findFoodAddLic_resultTupleScheme extends TupleScheme<findFoodAddLic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFoodAddLic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFoodAddLic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findLikeCompany_args implements org.apache.thrift.TBase<findLikeCompany_args, findLikeCompany_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLikeCompany_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLikeCompany_args");

    private static final org.apache.thrift.protocol.TField LOG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("LogInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLikeCompany_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLikeCompany_argsTupleSchemeFactory());
    }

    public LogInfo LogInfo; // required
    public String params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INFO((short)1, "LogInfo"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INFO
            return LOG_INFO;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INFO, new org.apache.thrift.meta_data.FieldMetaData("LogInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogInfo.class)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLikeCompany_args.class, metaDataMap);
    }

    public findLikeCompany_args() {
    }

    public findLikeCompany_args(
      LogInfo LogInfo,
      String params)
    {
      this();
      this.LogInfo = LogInfo;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLikeCompany_args(findLikeCompany_args other) {
      if (other.isSetLogInfo()) {
        this.LogInfo = new LogInfo(other.LogInfo);
      }
      if (other.isSetParams()) {
        this.params = other.params;
      }
    }

    public findLikeCompany_args deepCopy() {
      return new findLikeCompany_args(this);
    }

    @Override
    public void clear() {
      this.LogInfo = null;
      this.params = null;
    }

    public LogInfo getLogInfo() {
      return this.LogInfo;
    }

    public findLikeCompany_args setLogInfo(LogInfo LogInfo) {
      this.LogInfo = LogInfo;
      return this;
    }

    public void unsetLogInfo() {
      this.LogInfo = null;
    }

    /** Returns true if field LogInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetLogInfo() {
      return this.LogInfo != null;
    }

    public void setLogInfoIsSet(boolean value) {
      if (!value) {
        this.LogInfo = null;
      }
    }

    public String getParams() {
      return this.params;
    }

    public findLikeCompany_args setParams(String params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INFO:
        if (value == null) {
          unsetLogInfo();
        } else {
          setLogInfo((LogInfo)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INFO:
        return getLogInfo();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INFO:
        return isSetLogInfo();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLikeCompany_args)
        return this.equals((findLikeCompany_args)that);
      return false;
    }

    public boolean equals(findLikeCompany_args that) {
      if (that == null)
        return false;

      boolean this_present_LogInfo = true && this.isSetLogInfo();
      boolean that_present_LogInfo = true && that.isSetLogInfo();
      if (this_present_LogInfo || that_present_LogInfo) {
        if (!(this_present_LogInfo && that_present_LogInfo))
          return false;
        if (!this.LogInfo.equals(that.LogInfo))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_LogInfo = true && (isSetLogInfo());
      list.add(present_LogInfo);
      if (present_LogInfo)
        list.add(LogInfo);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(findLikeCompany_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogInfo()).compareTo(other.isSetLogInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LogInfo, other.LogInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLikeCompany_args(");
      boolean first = true;

      sb.append("LogInfo:");
      if (this.LogInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.LogInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (LogInfo != null) {
        LogInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLikeCompany_argsStandardSchemeFactory implements SchemeFactory {
      public findLikeCompany_argsStandardScheme getScheme() {
        return new findLikeCompany_argsStandardScheme();
      }
    }

    private static class findLikeCompany_argsStandardScheme extends StandardScheme<findLikeCompany_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLikeCompany_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.LogInfo = new LogInfo();
                struct.LogInfo.read(iprot);
                struct.setLogInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.params = iprot.readString();
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLikeCompany_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.LogInfo != null) {
          oprot.writeFieldBegin(LOG_INFO_FIELD_DESC);
          struct.LogInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeString(struct.params);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLikeCompany_argsTupleSchemeFactory implements SchemeFactory {
      public findLikeCompany_argsTupleScheme getScheme() {
        return new findLikeCompany_argsTupleScheme();
      }
    }

    private static class findLikeCompany_argsTupleScheme extends TupleScheme<findLikeCompany_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLikeCompany_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogInfo()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLogInfo()) {
          struct.LogInfo.write(oprot);
        }
        if (struct.isSetParams()) {
          oprot.writeString(struct.params);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLikeCompany_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.LogInfo = new LogInfo();
          struct.LogInfo.read(iprot);
          struct.setLogInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.params = iprot.readString();
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class findLikeCompany_result implements org.apache.thrift.TBase<findLikeCompany_result, findLikeCompany_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLikeCompany_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLikeCompany_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findLikeCompany_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findLikeCompany_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLikeCompany_result.class, metaDataMap);
    }

    public findLikeCompany_result() {
    }

    public findLikeCompany_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLikeCompany_result(findLikeCompany_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findLikeCompany_result deepCopy() {
      return new findLikeCompany_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findLikeCompany_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findLikeCompany_result)
        return this.equals((findLikeCompany_result)that);
      return false;
    }

    public boolean equals(findLikeCompany_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findLikeCompany_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findLikeCompany_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLikeCompany_resultStandardSchemeFactory implements SchemeFactory {
      public findLikeCompany_resultStandardScheme getScheme() {
        return new findLikeCompany_resultStandardScheme();
      }
    }

    private static class findLikeCompany_resultStandardScheme extends StandardScheme<findLikeCompany_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findLikeCompany_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findLikeCompany_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLikeCompany_resultTupleSchemeFactory implements SchemeFactory {
      public findLikeCompany_resultTupleScheme getScheme() {
        return new findLikeCompany_resultTupleScheme();
      }
    }

    private static class findLikeCompany_resultTupleScheme extends TupleScheme<findLikeCompany_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLikeCompany_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLikeCompany_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
